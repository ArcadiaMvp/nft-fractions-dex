The Graph
The purpose of this project is educational. Try out technologies, play with them and have some conclusion.  An important part of it is how to interact with smart contracts from a read and write prospective. Data storage and contract complexity (i.e.: more functions and logic inside) costs money in form of gas. So smart contracts should be kept simple in terms of complexity and storage size. There is even a contract size limit which is not that hard to reach. I know there are techniques to overcome on this like the diamond pattern but that is beyond the scope of this project. So one way to keep things simple in contracts is not use them for things that they are not built for. For example serving data reading use cases. An efficient way of serving data reading needs is to represent data in a form that suits the best to the UI and how data is presented on the UI. This pattern exists in "traditional" software architectures when data is written to a relational database and then transferred and transformed into a NoSQL database where it is represented the way the UI needs to show it. This is something similar that theGraph is built for in the decentralised world. Data is written to smart contracts where events are emitted and picked up by indexers that build specific subgraphs based on data from events. These subgraphs contain objects and their relations represented the same way as the UI would show them. So the front end will read data from the subgraph.
In our project we compare the naif way with the graph approach:
Our front end writes and reads data directly to BSC contracts. This is the naif way.
But it writes data into Matic contracts that are indexed by a subgraph. So instead of reading data from the Matic contracts the front end reads data from the subgraph.

This is presented in the following figure:
This difference has an impact on how we have to write smart contracts. The ones that are integrated with the Graph have to emit events and the other ones without the graph have to support rich data reading capabilities: more internal data structures in the contracts and data reading functions. The base contracts contain only common logic that is shared between versions on both chains. But in the same time base contracts have to provide a customisation possibility for the chain specific functionalities. This is what the hook functions are for. They are specified virtual and called in base contracts so if a child contract implements them then it can hook in custom logic. In Matic contracts they are used for event emission.
Let's have a simple example from the DexBase contract: the depositEth function.
function depositEth() public payable {
 require(!paused(), "Not allowed while paused");
 ethBalance[msg.sender] += msg.value;
_onEthBalanceChange(msg.sender, ethBalance[msg.sender]);
 }
After updating the ETH balance of the trader it calls a hook function: _onEthBalanceChange. This function is virtual and is overwritten in both chain specific contracts.
The Matic version simply emits an event:
function _onEthBalanceChange(address account, uint256 balance)
 internal
 override
 {
 emit EthBalanceChange(account, balance);
 }
Meanwhile the BSC version does not implement it since the internal data structure (ethBalance[]) is already updated in the base contract function. Instead it exposes a getter function for this balance array:
function getEthBalance(address owner) public view returns (uint256) {
 return ethBalance[owner];
 }
There are examples for the other way around where the BSC version implements the hook function and the Matic version does not. You can find these examples in the NftFractionsRepository contracts. The BscNftFractionsRepository contract defines its own internal data structures and updates them in the hook functions plus exposes getter functions to read data from the internal structures.
For managing the subgraph we set up another github repository that contains the subgraph related code. It contains the schema, entity management code and the subgraph manifest. You can read more on how to build a subgraph.
In the following figure we can visualise the entities that are created in the subgraph and their relations:
These entities are queried in the UI with graphQL queries.
As an example let's see the tokens and their balances for a given account. This query is used for listing tokens in the All NFTs TAB on the UI:
query getTokens($account: String) {
    tokens(
        where: {
          deposited: true
        }   
    ) {
      id
      identifier
      totalSupply
      tokenURI
      balances (
        where: {
            account: $account
          }
      ) {      
        value
      }
    }
  }
This will list all of the tokens that are not removed. We do not delete from the graph just flag the entities (removed = true) in case the token is withdrawn. The query also lists the balance of a given account for this token.
Let's see the pros and cons of using the Graph.
Pros:
Obvious pros mentioned above are the smart contract size and complexity which is lower.
Storage needs are also lower without special data structures that are built for serving the data reading use cases.
Pagination and ordering are also a thing. GraphQL supports them by default. Trying to support them on smart contract level gives a lot of overhead and obviously costs money.
There can be entities in the subgraph that does not have to be persisted in the smart contract's storage. A good example is the trade history of a NFT. Trades are only emitted as events when they are executed but they are not kept in any internal data structure of the smart contract. To be precise events are kept in the bloom filter which is a block level data structure but not internal in the smart contract so it costs much less. Without the graph they should be read from the bloom filter directly which is more complicated
Entities in the subgraph mirrors the data need of the UI. So using the graph also keeps the complexity of the UI more simple.

We also have to talk about the cons. There is one downside of reading data through the subgraph:
After the transaction has been confirmed by the Ethereum network it takes some time for the indexers of the subgraph to pick up the emitted events and index them. So when the front end gets the transaction confirmation message it can try to update the UI and read from the subgraph to show the up-to-date state. But it can not be guaranteed that the new state is already indexed. Subgraphs that have higher priority are indexed faster. You can read more about the graph network in depth here.

The conclusion is that using the Graph has so many benefits over the naif approach that we can see why the Graph is becoming the de facto standard for smart contracts. A huge plus is the Graph is also going decentralised.