The Bridge
In this article I would like to explain the Bridge between Polygon and BSC.
The bridge consists of the following parts:
One bridge contract on each chain. So there is a MaticBridge and a BscBridge contract.
One active component (let's call this the Bridge component) which listens for Transfer events emitted by any of the bridge contracts and calls the mint function on the other chain's bridge contract.

The workflow looks like the following:
1. The user wants to transfer his shares from one chain to another. Let's say from Polygon to BSC. He uses the transfer button on the UI. The front end calls the burn function on the chain specific bridge contract which is the MaticBridge in this example.
2. The MaticBridge contract calls the burn function on the MaticNftRepository contract so it burns the required amount of the given ERC1155 token. In the same time it emits a Transfer event with the necessary arguments (tokenId, amount, etc.).
3. The Bridge component catches the Transfer event from the Polygon bridge contract and calls the mint function on the BSC bridge contract with the parameters from the Transfer event.
4. The BSC bridge contract calls the mint function on the BSC NFT Fractions Repository contract so the required amount is minted on the BSC chain.
How can we ensure that only the bridge contract can call the mint and burn functions on the NFT Fractions Repository contracts? We can make the bridge contracts to be the admin of the NFT Fractions Repository contracts on the same chain. In practice the BscBridge contract is the admin of the BscNftFractionsRepository and the MaticBridge is the admin of the MaticNftFractionsRepository. And we attach the onlyOwner modifier to the mint function so only the admin can call it. So far so good but we have to protect the burn function on the bridge contracts as well. This can be achieved with the same manner. The Bridge component will call the burn functions with the admin address of the bridge contracts. This way no-one can burn and mint shares out of thin air.
The workflow is quite simple but there is one drawback. The Bridge component is a stand-alone process which means that it has to run on a dedicated (centralised) environment. This is the only centralised part of the whole NFT Fractions Dex ecosystem. It runs on AWS, more on that in a later article.
Let's take a closer a look at the Transfer event which contains all the information that has to be passed between chains. The arguments of the event:
- from: the address who is sending the shares
- to: the recipient address of the shares
- erc1155TokenId: token id
- erc1155Amount: amount to be transferred
- totalFractionsAmount: total fractions of the token. In case of the first transfer of a given token there has to be a new token minted on the other chain (not only amounts added to an existing token). In that case the total fractions are also needed.
- erc721ContractAddress: original erc721 contract address. In case of the first amount transfer of a given token there has to be a new token minted on the other chain. In that case the original contract address is also needed.
- erc721TokenId: original erc721 token id. In case of the first amount transfer of a given token there has to be a new token minted on the other chain. In that case the original token id is also needed.
- tokenURI: the token metadata URL. In case of the first amount transfer of a given token there has to be a new token minted on the other chain. In that case the token metadata URL is also needed.
- date: date of the transfer
- nonce: sequence id that is checked on the Bridge component to avoid duplicate processing.
- step: burn/mint
Bridge contracts are quite simple. The base contract contains all of the logic:
- It keeps track of already processed nonces to avoid duplicate processing.
- It defines the Transfer event.
- It exposes the necessary burn and mint functions.
Both chain specific contracts are purely inherited versions of the base contract without adding any further logic or modification to it.
A huge improvement of the Bridge architecture could be to make it completely decentralised with getting rid of the Bridge component. This remains to be solved.