Smart contract architecture
Let's have a general understanding of smart contracts in our application.
They can be grouped into three types of contracts:
NFT fractions repository contracts that store the minted NFT shares per individual NFTs. These repository contracts implement the ERC1155 standard so each token representing an original NFT can be divided into an arbitrary amount.
Decentralised exchange contracts that hold the exchange functionalities.
Bridge contracts that implement the necessary transfer functionalities across chains.

We are talking about groups of contracts because every type has a version on each chain. For example the NFT fractions repository contract is present on Polygon and on BSC as well because each chain has to separately handle how many fractions are kept on that specific chain.
These individual contracts on both chains inherit their core functionality from a common base contract which also belongs to that smart contract group.
Let's visualise it in the following diagram:
In the middle of the diagram there is the NFT fractions repository contracts group. It consist of the versions specific to each chain (MaticNftFractionsRepository, BscNftFractionsRepository), their base contact (NftFractionsRepositoryBase) and an interface that can be referenced from other group of contracts (e.g.: DexBase contract).
On the left hand side there is the Dex contract group with a more simple structure: a base contract and one version on each chain. The chain specific contracts have a reference to the NFT fractions repository contract on the corresponding chain, e.g.: the MaticDex contract has a reference to the MaticNftRepositoryContract. This reference is needed in case of a successful trade the Dex has to transfer shares between traders.
On the right hand side there is the Bridge contract group with a similar structure to the Dex contracts.
We will dig deeper into the functionalities of each group in separate articles but in general we can have two observations:
Contracts that hold state are upgradable with the Openzeppelin upgrade plugin. This is true for the contracts in the NFT Fractions Repository group and in the Dex contract group as both holds state variables. On the other hand the Bridge contracts only implement logic, they do not have any state (they only keep track of processed nonces, more on the later), so they do not have to be upgradable. In case of a bug those contracts could be easily replaced with a newer version without any complicated upgrade process that can preserve the state. The upgradable contract groups inherit their functionalities from the upgradable contract versions of Openzeppelin (e.g.: ERC1155Upgradeable, PausableUpgradeable, OwnableUpgradeable, etc.). You can read more on the Openzeppelin upgrade plugin and how to write upgradable contracts here.
One of the purpose of this project is to play with technologies. This covers the Graph as well. The Polygon side of the application reads data through the Graph meanwhile the BSC side reads data from the smart contracts directly for being able to compare the pros and cons of the two solutions. This difference has an impact on how we have to write smart contracts. The ones that are integrated with the Graph have to emit events and the other ones without the graph have to support rich data reading capabilities: more internal data structures in the contracts and data reading functions. Based on these functions we can support the data reading use cases. For being able to handle these differences the base contracts define hook functions that can be implemented in child contracts to hook in specific functionalities. In case of Polygon contracts these hooks contain the event emission and in case of BSC contracts these hook functions update the internal data structures. We will detail the differences when going deeper into specific contract groups.

Some thoughts on smart contract security:
Contracts are in general pausable. So critical functions can be paused.
Contracts are also ownable. So there are functions that can be called only by the owner of the contract.
Functions that handle transfer of either currency or shares are guarded against reentrancy.

All of the functionalities above are achieved with the appropriate Openzeppelin contracts.
In the next section we will detail the NFT Fractions Repository contracts.
If you want to reach other articles in the series you can find links in the main article.