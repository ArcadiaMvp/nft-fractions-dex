{
  "manifestVersion": "3.1",
  "impls": {
    "ba68e9b40f34d266cb977ccd89df2a90dc4b673f7f5d23f82a04a55f4eff180c": {
      "address": "0x6879CF8ad63439b2fE1c7b33236C0ea1c4E40F2a",
      "txHash": "0xdde4542bbb1b742fe7ca11e2433d2bfb36e19d10d5e093717278825fd81e3cc1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)3395_storage",
            "src": "NftFractionsRepository.sol:26"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)1004_storage)",
            "src": "NftFractionsRepository.sol:27"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIdsByShareOwner",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "NftFractionsRepository.sol:30"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "ownersByTokenId",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "src": "NftFractionsRepository.sol:32"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "NftFractionsRepository.sol:34"
          }
        ],
        "types": {
          "t_struct(Counter)3395_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)1004_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepository.Token)"
          },
          "t_struct(Token)1004_storage": {
            "label": "struct NftFractionsRepository.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89a814a500d9fca343fa909b376ea102aa709568d09d2687c28deaff497cbc90": {
      "address": "0x32a5FfC0640f61e48d67b45C9AA4d0cF95DDBb5D",
      "txHash": "0xc809e36a3998c6fccd56001cef8d8df6a17448d4b1903f9a7b857d1e8a526d0f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "Dex",
            "label": "_orderIds",
            "type": "t_struct(Counter)3395_storage",
            "src": "Dex.sol:37"
          },
          {
            "contract": "Dex",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:38"
          },
          {
            "contract": "Dex",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:39"
          },
          {
            "contract": "Dex",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)37_storage)dyn_storage))",
            "src": "Dex.sol:40"
          },
          {
            "contract": "Dex",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "Dex.sol:41"
          },
          {
            "contract": "Dex",
            "label": "nftFractionsRepository",
            "type": "t_contract(NftFractionsRepository)1571",
            "src": "Dex.sol:42"
          }
        ],
        "types": {
          "t_struct(Counter)3395_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)37_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct Dex.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)37_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct Dex.Order[])"
          },
          "t_array(t_struct(Order)37_storage)dyn_storage": {
            "label": "struct Dex.Order[]"
          },
          "t_struct(Order)37_storage": {
            "label": "struct Dex.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)19"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)19": {
            "label": "enum Dex.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(NftFractionsRepository)1571": {
            "label": "contract NftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bd4045de1b936f6e7925ed1024741f7331a6970faf64e5bd006cee7f8b17b467": {
      "address": "0x64e630B56f04D2ba2a765f47C8E75B6Ac670a217",
      "txHash": "0x9997408108acdc7d09855dd8125b97ebeb5f0cce0919005f8681ef39af5a7579",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)3969_storage",
            "src": "NftFractionsRepository.sol:26"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)1214_storage)",
            "src": "NftFractionsRepository.sol:27"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIdsByShareOwner",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "NftFractionsRepository.sol:30"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "ownersByTokenId",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "src": "NftFractionsRepository.sol:32"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "NftFractionsRepository.sol:34"
          }
        ],
        "types": {
          "t_struct(Counter)3969_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)1214_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepository.Token)"
          },
          "t_struct(Token)1214_storage": {
            "label": "struct NftFractionsRepository.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e6ca3a3335f65c379ceb2f40e64284e930e94a9b46b3957034e911296c85abe3": {
      "address": "0xdf03CCA2deeF9BD4B74E3C55Bf49702F3Cf016e5",
      "txHash": "0xbca1718b451822b5d51e4ab5a8fd1cc887bbd42a387d41641fd33baaabdb6d36",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)4040_storage",
            "src": "NftFractionsRepository.sol:27"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)1225_storage)",
            "src": "NftFractionsRepository.sol:28"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIdsByShareOwner",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "NftFractionsRepository.sol:31"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "ownersByTokenId",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "src": "NftFractionsRepository.sol:33"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "NftFractionsRepository.sol:35"
          }
        ],
        "types": {
          "t_struct(Counter)4040_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)1225_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepository.Token)"
          },
          "t_struct(Token)1225_storage": {
            "label": "struct NftFractionsRepository.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "45c90cadb8ec928ae61072b996cdd29586a1ac0809e054a3adebc82c28c0ec2c": {
      "address": "0x3C2DaE553a6A608a48e661f7C8bC3F0EB5208502",
      "txHash": "0x9ce18b03d8939cb0107eed4a76cf3ca467b2d4cf557cbd63736a1cfa86b8c84c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "Dex",
            "label": "_orderIds",
            "type": "t_struct(Counter)4040_storage",
            "src": "Dex.sol:37"
          },
          {
            "contract": "Dex",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:38"
          },
          {
            "contract": "Dex",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:39"
          },
          {
            "contract": "Dex",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)267_storage)dyn_storage))",
            "src": "Dex.sol:40"
          },
          {
            "contract": "Dex",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "Dex.sol:41"
          },
          {
            "contract": "Dex",
            "label": "nftFractionsRepository",
            "type": "t_contract(NftFractionsRepository)2216",
            "src": "Dex.sol:42"
          }
        ],
        "types": {
          "t_struct(Counter)4040_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)267_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct Dex.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)267_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct Dex.Order[])"
          },
          "t_array(t_struct(Order)267_storage)dyn_storage": {
            "label": "struct Dex.Order[]"
          },
          "t_struct(Order)267_storage": {
            "label": "struct Dex.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)249"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)249": {
            "label": "enum Dex.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(NftFractionsRepository)2216": {
            "label": "contract NftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9c9085114ccf5fd44243bba773bf5b572dc6b84e8bf3e6ba0eb2d1f418bc0f45": {
      "address": "0x02BE6c470ecC3A3bd6e68297eEA2919efb5a9F6C",
      "txHash": "0xb64ce4974c09d1b99e82b4bd34ea81ebfebefd235c2a98ef30090090400ac3e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)4049_storage",
            "src": "NftFractionsRepository.sol:27"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)1232_storage)",
            "src": "NftFractionsRepository.sol:28"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIdsByShareOwner",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "NftFractionsRepository.sol:31"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "ownersByTokenId",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "src": "NftFractionsRepository.sol:33"
          },
          {
            "contract": "NftFractionsRepository",
            "label": "tokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "NftFractionsRepository.sol:35"
          }
        ],
        "types": {
          "t_struct(Counter)4049_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)1232_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepository.Token)"
          },
          "t_struct(Token)1232_storage": {
            "label": "struct NftFractionsRepository.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8107f886bbe8dbedb0a2610d3969dd0e4c09c4fcbfdc63bedcf43f3cb6a2a584": {
      "address": "0x5CfAb99723fc2751ca44106db01B01357043C14a",
      "txHash": "0x72f870f5b2af00b3b5b91babd34db9b99bc8cb78137df21db79209bf9ff062e7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "Dex",
            "label": "_orderIds",
            "type": "t_struct(Counter)4111_storage",
            "src": "Dex.sol:37"
          },
          {
            "contract": "Dex",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:38"
          },
          {
            "contract": "Dex",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:39"
          },
          {
            "contract": "Dex",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage))",
            "src": "Dex.sol:40"
          },
          {
            "contract": "Dex",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "Dex.sol:41"
          },
          {
            "contract": "Dex",
            "label": "nftFractionsRepository",
            "type": "t_contract(NftFractionsRepository)2287",
            "src": "Dex.sol:42"
          }
        ],
        "types": {
          "t_struct(Counter)4111_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct Dex.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct Dex.Order[])"
          },
          "t_array(t_struct(Order)274_storage)dyn_storage": {
            "label": "struct Dex.Order[]"
          },
          "t_struct(Order)274_storage": {
            "label": "struct Dex.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)256"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)256": {
            "label": "enum Dex.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(NftFractionsRepository)2287": {
            "label": "contract NftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7d98cb7c9ecbfca6c16a2b5b7e6420443bc7734b074cb8aa3826591e7564e340": {
      "address": "0x7477387E4586b7BE4218531c4DD80D6f6a1a2060",
      "txHash": "0x77cc199740ca339c7c57bf1625c9c33457a50a5873bb55caf678019d4e297e5c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "MaticNftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)4721_storage",
            "src": "MaticNftFractionsRepository.sol:43"
          },
          {
            "contract": "MaticNftFractionsRepository",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)1344_storage)",
            "src": "MaticNftFractionsRepository.sol:44"
          }
        ],
        "types": {
          "t_struct(Counter)4721_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)1344_storage)": {
            "label": "mapping(uint256 => struct MaticNftFractionsRepository.Token)"
          },
          "t_struct(Token)1344_storage": {
            "label": "struct MaticNftFractionsRepository.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fbdd4e5fabe6f72c20c9b9b7c969fdb9f557eb22da6ac3073852437d01e839ab": {
      "address": "0x669FC60a520b668345951578A90C174d415787f6",
      "txHash": "0x648617a8bdb271716b5e05f6106565753b9778bf69e92866dc818ac95bbdffcb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "Dex",
            "label": "_orderIds",
            "type": "t_struct(Counter)4721_storage",
            "src": "Dex.sol:40"
          },
          {
            "contract": "Dex",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:41"
          },
          {
            "contract": "Dex",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Dex.sol:42"
          },
          {
            "contract": "Dex",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage))",
            "src": "Dex.sol:43"
          },
          {
            "contract": "Dex",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "Dex.sol:44"
          },
          {
            "contract": "Dex",
            "label": "nftFractionsRepository",
            "type": "t_contract(INftFractionsRepository)1306",
            "src": "Dex.sol:45"
          }
        ],
        "types": {
          "t_struct(Counter)4721_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct Dex.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)274_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct Dex.Order[])"
          },
          "t_array(t_struct(Order)274_storage)dyn_storage": {
            "label": "struct Dex.Order[]"
          },
          "t_struct(Order)274_storage": {
            "label": "struct Dex.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)256"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)256": {
            "label": "enum Dex.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(INftFractionsRepository)1306": {
            "label": "contract INftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "688a86557699bb0532fea8d1cf8e28cc604e8275ea3faa44cc6ec4bb1f27ee10": {
      "address": "0x3f3aFdC612Ed29fB818Dca8Ef5db5C27Becd0CeC",
      "txHash": "0x644da4bf94c11c63c4cfb425252ce18325c88115559aa36431133e126c4f0449",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepositoryBase",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)2144_storage)",
            "src": "NftFractionsRepositoryBase.sol:26"
          },
          {
            "contract": "MaticNftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)4317_storage",
            "src": "MaticNftFractionsRepository.sol:25"
          }
        ],
        "types": {
          "t_struct(Counter)4317_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)2144_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepositoryBase.Token)"
          },
          "t_struct(Token)2144_storage": {
            "label": "struct NftFractionsRepositoryBase.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9dda035ac05d0ec8c06dec7437e5cccdaeb049d6b7994b14efb69590de051582": {
      "address": "0xed914C14202d468c995dA9f08019D1D449Ec2449",
      "txHash": "0xa4b4978e6bc720a9daa8ed9bcf3098aaebd52ccb8e2a3b85d3bbec761c8855a2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:406"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "NftFractionsRepositoryBase",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)2144_storage)",
            "src": "NftFractionsRepositoryBase.sol:26"
          },
          {
            "contract": "MaticNftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)4307_storage",
            "src": "MaticNftFractionsRepository.sol:25"
          }
        ],
        "types": {
          "t_struct(Counter)4307_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)2144_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepositoryBase.Token)"
          },
          "t_struct(Token)2144_storage": {
            "label": "struct NftFractionsRepositoryBase.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9d5fe46da4dccce815acfd3fd8af6c8e96a05f2449676fe05f309638171ed3e1": {
      "address": "0xACF48169E8d216CB9bC0818e747C7c07Bb4C1Cd8",
      "txHash": "0xf84ef3fcd97468048eedbc80fa2c2d7bb448522c4c87a9c9222ae5c0604854d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "DexBase",
            "label": "_orderIds",
            "type": "t_struct(Counter)5668_storage",
            "src": "DexBase.sol:30"
          },
          {
            "contract": "DexBase",
            "label": "_tradeIds",
            "type": "t_struct(Counter)5668_storage",
            "src": "DexBase.sol:31"
          },
          {
            "contract": "DexBase",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "DexBase.sol:32"
          },
          {
            "contract": "DexBase",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "DexBase.sol:33"
          },
          {
            "contract": "DexBase",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)1778_storage)dyn_storage))",
            "src": "DexBase.sol:34"
          },
          {
            "contract": "DexBase",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "DexBase.sol:35"
          },
          {
            "contract": "DexBase",
            "label": "nftFractionsRepository",
            "type": "t_contract(INftFractionsRepository)2979",
            "src": "DexBase.sol:36"
          },
          {
            "contract": "MaticDex",
            "label": "_ids",
            "type": "t_struct(Counter)5668_storage",
            "src": "MaticDex.sol:45"
          }
        ],
        "types": {
          "t_struct(Counter)5668_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)1778_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct DexBase.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)1778_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct DexBase.Order[])"
          },
          "t_array(t_struct(Order)1778_storage)dyn_storage": {
            "label": "struct DexBase.Order[]"
          },
          "t_struct(Order)1778_storage": {
            "label": "struct DexBase.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)1760"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)1760": {
            "label": "enum DexBase.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(INftFractionsRepository)2979": {
            "label": "contract INftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d9c2137b71cead1a63f5d5dcac6612e287a7813278d01cdd35e06bb1cfa1ef8d": {
      "address": "0x9CDd907320f4D096DCC88E7D4829bDC4DA8147C7",
      "txHash": "0x94c9925733e0f87c2c2073119d7cec4e7c1237512a9153343e6292424b76b9fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "DexBase",
            "label": "_orderIds",
            "type": "t_struct(Counter)4715_storage",
            "src": "DexBase.sol:30"
          },
          {
            "contract": "DexBase",
            "label": "_tradeIds",
            "type": "t_struct(Counter)4715_storage",
            "src": "DexBase.sol:31"
          },
          {
            "contract": "DexBase",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "DexBase.sol:32"
          },
          {
            "contract": "DexBase",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "DexBase.sol:33"
          },
          {
            "contract": "DexBase",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)828_storage)dyn_storage))",
            "src": "DexBase.sol:34"
          },
          {
            "contract": "DexBase",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "DexBase.sol:35"
          },
          {
            "contract": "DexBase",
            "label": "nftFractionsRepository",
            "type": "t_contract(INftFractionsRepository)2026",
            "src": "DexBase.sol:36"
          },
          {
            "contract": "MaticDex",
            "label": "_ids",
            "type": "t_struct(Counter)4715_storage",
            "src": "MaticDex.sol:45"
          }
        ],
        "types": {
          "t_struct(Counter)4715_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)828_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct DexBase.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)828_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct DexBase.Order[])"
          },
          "t_array(t_struct(Order)828_storage)dyn_storage": {
            "label": "struct DexBase.Order[]"
          },
          "t_struct(Order)828_storage": {
            "label": "struct DexBase.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)810"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)810": {
            "label": "enum DexBase.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(INftFractionsRepository)2026": {
            "label": "contract INftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0xd2714d165DCe218deF9E7eadC4Bae1F7A216649B",
    "txHash": "0x69206fb19fd8c12f8dc8299ee456d337a447eee8f3d64d9b5b7c09007d6d3e2f"
  }
}
